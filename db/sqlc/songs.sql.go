// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: songs.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const doesSongExist = `-- name: DoesSongExist :one
SELECT EXISTS(SELECT 1 FROM songs WHERE name = $1 AND artists = $2 AND release_year = $3)
`

type DoesSongExistParams struct {
	Name        string `json:"name"`
	Artists     string `json:"artists"`
	ReleaseYear int32  `json:"releaseYear"`
}

func (q *Queries) DoesSongExist(ctx context.Context, arg DoesSongExistParams) (bool, error) {
	row := q.db.QueryRow(ctx, doesSongExist, arg.Name, arg.Artists, arg.ReleaseYear)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const getRandomSongNames = `-- name: GetRandomSongNames :many
SELECT name, artists, release_year
FROM songs
ORDER BY RANDOM()
LIMIT 20
`

type GetRandomSongNamesRow struct {
	Name        string `json:"name"`
	Artists     string `json:"artists"`
	ReleaseYear int32  `json:"releaseYear"`
}

func (q *Queries) GetRandomSongNames(ctx context.Context) ([]GetRandomSongNamesRow, error) {
	rows, err := q.db.Query(ctx, getRandomSongNames)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetRandomSongNamesRow
	for rows.Next() {
		var i GetRandomSongNamesRow
		if err := rows.Scan(&i.Name, &i.Artists, &i.ReleaseYear); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRandomSongNamesWithLyrics = `-- name: GetRandomSongNamesWithLyrics :many
SELECT name, artists, release_year 
FROM songs
WHERE lyrics IS NOT NULL
ORDER BY RANDOM()
LIMIT 20
`

type GetRandomSongNamesWithLyricsRow struct {
	Name        string `json:"name"`
	Artists     string `json:"artists"`
	ReleaseYear int32  `json:"releaseYear"`
}

func (q *Queries) GetRandomSongNamesWithLyrics(ctx context.Context) ([]GetRandomSongNamesWithLyricsRow, error) {
	rows, err := q.db.Query(ctx, getRandomSongNamesWithLyrics)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetRandomSongNamesWithLyricsRow
	for rows.Next() {
		var i GetRandomSongNamesWithLyricsRow
		if err := rows.Scan(&i.Name, &i.Artists, &i.ReleaseYear); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRandomSongWithLyrics = `-- name: GetRandomSongWithLyrics :one
SELECT id, name, artists, release_year, thumbnail_url, spotify_url, apple_music_url, youtube_url, lyrics, is_unreleased, pure_title FROM songs
WHERE lyrics IS NOT NULL
AND (LOWER(artists) LIKE '%martin garrix%' 
   OR LOWER(artists) LIKE '%area21%'
   OR LOWER(artists) LIKE '%ytrram%'
   OR LOWER(artists) LIKE '%grx%')
ORDER BY RANDOM()
LIMIT 1
`

func (q *Queries) GetRandomSongWithLyrics(ctx context.Context) (Song, error) {
	row := q.db.QueryRow(ctx, getRandomSongWithLyrics)
	var i Song
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Artists,
		&i.ReleaseYear,
		&i.ThumbnailUrl,
		&i.SpotifyUrl,
		&i.AppleMusicUrl,
		&i.YoutubeUrl,
		&i.Lyrics,
		&i.IsUnreleased,
		&i.PureTitle,
	)
	return i, err
}

const getRandomSongWithLyricsEasy = `-- name: GetRandomSongWithLyricsEasy :one
SELECT id, name, artists, release_year, thumbnail_url, spotify_url, apple_music_url, youtube_url, lyrics, is_unreleased, pure_title FROM songs
WHERE lyrics IS NOT NULL
AND LOWER(artists) LIKE '%martin garrix%'
ORDER BY RANDOM()
LIMIT 1
`

func (q *Queries) GetRandomSongWithLyricsEasy(ctx context.Context) (Song, error) {
	row := q.db.QueryRow(ctx, getRandomSongWithLyricsEasy)
	var i Song
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Artists,
		&i.ReleaseYear,
		&i.ThumbnailUrl,
		&i.SpotifyUrl,
		&i.AppleMusicUrl,
		&i.YoutubeUrl,
		&i.Lyrics,
		&i.IsUnreleased,
		&i.PureTitle,
	)
	return i, err
}

const getSong = `-- name: GetSong :one
SELECT id, name, artists, release_year, thumbnail_url, spotify_url, apple_music_url, youtube_url, lyrics, is_unreleased, pure_title FROM songs WHERE name = $1 AND artists = $2 AND release_year = $3
`

type GetSongParams struct {
	Name        string `json:"name"`
	Artists     string `json:"artists"`
	ReleaseYear int32  `json:"releaseYear"`
}

func (q *Queries) GetSong(ctx context.Context, arg GetSongParams) (Song, error) {
	row := q.db.QueryRow(ctx, getSong, arg.Name, arg.Artists, arg.ReleaseYear)
	var i Song
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Artists,
		&i.ReleaseYear,
		&i.ThumbnailUrl,
		&i.SpotifyUrl,
		&i.AppleMusicUrl,
		&i.YoutubeUrl,
		&i.Lyrics,
		&i.IsUnreleased,
		&i.PureTitle,
	)
	return i, err
}

const getSongsLike = `-- name: GetSongsLike :many
SELECT name, artists, release_year
FROM songs
WHERE LOWER(artists || ' - ' || name) LIKE LOWER($1)
LIMIT 20
`

type GetSongsLikeRow struct {
	Name        string `json:"name"`
	Artists     string `json:"artists"`
	ReleaseYear int32  `json:"releaseYear"`
}

func (q *Queries) GetSongsLike(ctx context.Context, lower string) ([]GetSongsLikeRow, error) {
	rows, err := q.db.Query(ctx, getSongsLike, lower)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetSongsLikeRow
	for rows.Next() {
		var i GetSongsLikeRow
		if err := rows.Scan(&i.Name, &i.Artists, &i.ReleaseYear); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSongsWithLyricsLike = `-- name: GetSongsWithLyricsLike :many
SELECT name, artists, release_year 
FROM songs
WHERE lyrics IS NOT NULL AND
LOWER(artists || ' - ' || name) LIKE LOWER($1)
LIMIT 20
`

type GetSongsWithLyricsLikeRow struct {
	Name        string `json:"name"`
	Artists     string `json:"artists"`
	ReleaseYear int32  `json:"releaseYear"`
}

func (q *Queries) GetSongsWithLyricsLike(ctx context.Context, lower string) ([]GetSongsWithLyricsLikeRow, error) {
	rows, err := q.db.Query(ctx, getSongsWithLyricsLike, lower)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetSongsWithLyricsLikeRow
	for rows.Next() {
		var i GetSongsWithLyricsLikeRow
		if err := rows.Scan(&i.Name, &i.Artists, &i.ReleaseYear); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertRelease = `-- name: InsertRelease :one
INSERT INTO songs (name, artists, release_year, thumbnail_url, spotify_url, apple_music_url, youtube_url)
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING id, name, artists, release_year, thumbnail_url, spotify_url, apple_music_url, youtube_url, lyrics, is_unreleased, pure_title
`

type InsertReleaseParams struct {
	Name          string      `json:"name"`
	Artists       string      `json:"artists"`
	ReleaseYear   int32       `json:"releaseYear"`
	ThumbnailUrl  pgtype.Text `json:"thumbnailUrl"`
	SpotifyUrl    pgtype.Text `json:"spotifyUrl"`
	AppleMusicUrl pgtype.Text `json:"appleMusicUrl"`
	YoutubeUrl    pgtype.Text `json:"youtubeUrl"`
}

func (q *Queries) InsertRelease(ctx context.Context, arg InsertReleaseParams) (Song, error) {
	row := q.db.QueryRow(ctx, insertRelease,
		arg.Name,
		arg.Artists,
		arg.ReleaseYear,
		arg.ThumbnailUrl,
		arg.SpotifyUrl,
		arg.AppleMusicUrl,
		arg.YoutubeUrl,
	)
	var i Song
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Artists,
		&i.ReleaseYear,
		&i.ThumbnailUrl,
		&i.SpotifyUrl,
		&i.AppleMusicUrl,
		&i.YoutubeUrl,
		&i.Lyrics,
		&i.IsUnreleased,
		&i.PureTitle,
	)
	return i, err
}
