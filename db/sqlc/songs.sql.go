// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: songs.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getAllSongNames = `-- name: GetAllSongNames :many
SELECT name, alias FROM songs
`

type GetAllSongNamesRow struct {
	Name  string      `json:"name"`
	Alias pgtype.Text `json:"alias"`
}

func (q *Queries) GetAllSongNames(ctx context.Context) ([]GetAllSongNamesRow, error) {
	rows, err := q.db.Query(ctx, getAllSongNames)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllSongNamesRow
	for rows.Next() {
		var i GetAllSongNamesRow
		if err := rows.Scan(&i.Name, &i.Alias); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllSongNamesWithLyrics = `-- name: GetAllSongNamesWithLyrics :many
SELECT name, alias FROM songs
WHERE lyrics IS NOT NULL
LIMIT 20
`

type GetAllSongNamesWithLyricsRow struct {
	Name  string      `json:"name"`
	Alias pgtype.Text `json:"alias"`
}

func (q *Queries) GetAllSongNamesWithLyrics(ctx context.Context) ([]GetAllSongNamesWithLyricsRow, error) {
	rows, err := q.db.Query(ctx, getAllSongNamesWithLyrics)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllSongNamesWithLyricsRow
	for rows.Next() {
		var i GetAllSongNamesWithLyricsRow
		if err := rows.Scan(&i.Name, &i.Alias); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRandomSongWithLyrics = `-- name: GetRandomSongWithLyrics :one
SELECT alias, name, lyrics, thumbnail_url FROM songs
WHERE lyrics IS NOT NULL
ORDER BY RANDOM()
LIMIT 1
`

func (q *Queries) GetRandomSongWithLyrics(ctx context.Context) (Song, error) {
	row := q.db.QueryRow(ctx, getRandomSongWithLyrics)
	var i Song
	err := row.Scan(
		&i.Alias,
		&i.Name,
		&i.Lyrics,
		&i.ThumbnailUrl,
	)
	return i, err
}

const getRandomSongWithLyricsEasy = `-- name: GetRandomSongWithLyricsEasy :one
SELECT alias, name, lyrics, thumbnail_url FROM songs
WHERE lyrics IS NOT NULL
AND alias = 'Martin Garrix'
ORDER BY RANDOM()
LIMIT 1
`

func (q *Queries) GetRandomSongWithLyricsEasy(ctx context.Context) (Song, error) {
	row := q.db.QueryRow(ctx, getRandomSongWithLyricsEasy)
	var i Song
	err := row.Scan(
		&i.Alias,
		&i.Name,
		&i.Lyrics,
		&i.ThumbnailUrl,
	)
	return i, err
}

const getSongLyrics = `-- name: GetSongLyrics :one
SELECT alias, name, lyrics, thumbnail_url FROM songs WHERE name = $1
`

func (q *Queries) GetSongLyrics(ctx context.Context, name string) (Song, error) {
	row := q.db.QueryRow(ctx, getSongLyrics, name)
	var i Song
	err := row.Scan(
		&i.Alias,
		&i.Name,
		&i.Lyrics,
		&i.ThumbnailUrl,
	)
	return i, err
}

const getSongsLike = `-- name: GetSongsLike :many
SELECT name, alias FROM songs WHERE name LIKE $1
`

type GetSongsLikeRow struct {
	Name  string      `json:"name"`
	Alias pgtype.Text `json:"alias"`
}

func (q *Queries) GetSongsLike(ctx context.Context, name string) ([]GetSongsLikeRow, error) {
	rows, err := q.db.Query(ctx, getSongsLike, name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetSongsLikeRow
	for rows.Next() {
		var i GetSongsLikeRow
		if err := rows.Scan(&i.Name, &i.Alias); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSongsWithLyricsLike = `-- name: GetSongsWithLyricsLike :many
SELECT name, alias FROM songs
WHERE lyrics IS NOT NULL AND name LIKE $1
LIMIT 20
`

type GetSongsWithLyricsLikeRow struct {
	Name  string      `json:"name"`
	Alias pgtype.Text `json:"alias"`
}

func (q *Queries) GetSongsWithLyricsLike(ctx context.Context, name string) ([]GetSongsWithLyricsLikeRow, error) {
	rows, err := q.db.Query(ctx, getSongsWithLyricsLike, name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetSongsWithLyricsLikeRow
	for rows.Next() {
		var i GetSongsWithLyricsLikeRow
		if err := rows.Scan(&i.Name, &i.Alias); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
