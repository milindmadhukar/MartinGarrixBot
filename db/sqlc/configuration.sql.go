// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: configuration.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getRedditNotificationChannels = `-- name: GetRedditNotificationChannels :many
SELECT reddit_notifications_channel, reddit_notifications_role 
FROM guild_configurations
WHERE reddit_notifications_channel IS NOT NULL
`

type GetRedditNotificationChannelsRow struct {
	RedditNotificationsChannel pgtype.Int8 `json:"redditNotificationsChannel"`
	RedditNotificationsRole    pgtype.Int8 `json:"redditNotificationsRole"`
}

func (q *Queries) GetRedditNotificationChannels(ctx context.Context) ([]GetRedditNotificationChannelsRow, error) {
	rows, err := q.db.Query(ctx, getRedditNotificationChannels)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetRedditNotificationChannelsRow
	for rows.Next() {
		var i GetRedditNotificationChannelsRow
		if err := rows.Scan(&i.RedditNotificationsChannel, &i.RedditNotificationsRole); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSTMPDNofiticationChannels = `-- name: GetSTMPDNofiticationChannels :many
SELECT stmpd_notifications_channel, stmpd_notifications_role
FROM guild_configurations
WHERE stmpd_notifications_channel IS NOT NULL
`

type GetSTMPDNofiticationChannelsRow struct {
	StmpdNotificationsChannel pgtype.Int8 `json:"stmpdNotificationsChannel"`
	StmpdNotificationsRole    pgtype.Int8 `json:"stmpdNotificationsRole"`
}

func (q *Queries) GetSTMPDNofiticationChannels(ctx context.Context) ([]GetSTMPDNofiticationChannelsRow, error) {
	rows, err := q.db.Query(ctx, getSTMPDNofiticationChannels)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetSTMPDNofiticationChannelsRow
	for rows.Next() {
		var i GetSTMPDNofiticationChannelsRow
		if err := rows.Scan(&i.StmpdNotificationsChannel, &i.StmpdNotificationsRole); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getYoutubeNotifactionChannels = `-- name: GetYoutubeNotifactionChannels :many
SELECT youtube_notifications_channel, youtube_notifications_role 
FROM guild_configurations
WHERE youtube_notifications_channel IS NOT NULL
`

type GetYoutubeNotifactionChannelsRow struct {
	YoutubeNotificationsChannel pgtype.Int8 `json:"youtubeNotificationsChannel"`
	YoutubeNotificationsRole    pgtype.Int8 `json:"youtubeNotificationsRole"`
}

func (q *Queries) GetYoutubeNotifactionChannels(ctx context.Context) ([]GetYoutubeNotifactionChannelsRow, error) {
	rows, err := q.db.Query(ctx, getYoutubeNotifactionChannels)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetYoutubeNotifactionChannelsRow
	for rows.Next() {
		var i GetYoutubeNotifactionChannelsRow
		if err := rows.Scan(&i.YoutubeNotificationsChannel, &i.YoutubeNotificationsRole); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
